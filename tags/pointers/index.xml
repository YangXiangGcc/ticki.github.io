<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pointers on Ticki&#39;s blog</title>
    <link>http://ticki.github.io/tags/pointers/</link>
    <description>Recent content in Pointers on Ticki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jun 2016 11:24:24 +0200</lastBuildDate>
    <atom:link href="http://ticki.github.io/tags/pointers/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lambda crabs (part 3): Region-based alias analysis</title>
      <link>http://ticki.github.io/blog/lambda-crabs-part-3-region-based-alias-analysis/</link>
      <pubDate>Wed, 08 Jun 2016 11:24:24 +0200</pubDate>
      
      <guid>http://ticki.github.io/blog/lambda-crabs-part-3-region-based-alias-analysis/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;http://ticki.github.io/blog/lambda_crabs_2/&#34;&gt;last post&lt;/a&gt;, we saw how to
infer regions and their span. In this post, we will cover aliasing and how to
ensure guarantees through region analysis.&lt;/p&gt;

&lt;h2 id=&#34;aliasing-mutable-aliasing-and-unsafety&#34;&gt;Aliasing, mutable aliasing, and unsafety.&lt;/h2&gt;

&lt;p&gt;Two pointers are said to be &lt;em&gt;aliased&lt;/em&gt;, if they refer to the same object. Alias
analysis is essential to program verification, optimizers, and compiler theory.&lt;/p&gt;

&lt;p&gt;Alias analysis is the study of which pointers are aliased and, more
importantly, which pointers &lt;em&gt;aren&amp;rsquo;t aliased&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Rust guarantees that no mutable reference is aliased. This is statically
checked, and we will show how in this post.&lt;/p&gt;

&lt;p&gt;So, why is aliasing guarantees even needed?&lt;/p&gt;

&lt;p&gt;The answer is that I need to be able to reason about the invariants of the
pointers content, while being sure that those aren&amp;rsquo;t broken in the period of
accessibility.&lt;/p&gt;

&lt;p&gt;Furthermore, we want strict thread-safety, which requires guarantees about
shared mutable state.&lt;/p&gt;

&lt;h2 id=&#34;different-values-different-namespaces&#34;&gt;Different values, different namespaces&lt;/h2&gt;

&lt;p&gt;To reason about mutability overlaps and aliasing through regions, we need a
notion of different namespaces.&lt;/p&gt;

&lt;p&gt;For example, say some variable X is referenced in a lifetime &lt;code&gt;&#39;a&lt;/code&gt;. Does that
mean another variable Y living in the same scope can&amp;rsquo;t be mutated?&lt;/p&gt;

&lt;p&gt;Of course not! Let&amp;rsquo;s consider:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;{
    let mut a = 2; // ------+ &#39;a
    let b = &amp;amp;a;    // ----+ | &#39;b
    let mut c = 0; // --+ | | &#39;c
    c = 1;         //   | | |
    c = 2;         //   | | |
} // -------------------+-+-+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see &lt;code&gt;a&lt;/code&gt; is aliased, thus mutating it is not allowed. However, &lt;code&gt;&#39;a:
&#39;c&lt;/code&gt;, but that doesn&amp;rsquo;t mean they refer to the same.&lt;/p&gt;

&lt;p&gt;Holding a global namespace would make the above example fail, since it has no
distinction between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; and their respective lifetimes.&lt;/p&gt;

&lt;p&gt;For that reason, we need to segregate the regions, such that we can effectively
reason about aliasing without mixing values up.&lt;/p&gt;

&lt;h2 id=&#34;sublattices&#34;&gt;Sublattices&lt;/h2&gt;

&lt;p&gt;We talked a bit about lattices and their applications in the last part. I
recommend reading that if you do not know what a lattice is.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s introduce the notion of a &lt;em&gt;sublattice&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;M&lt;/em&gt; is a sublattice of &lt;em&gt;L&lt;/em&gt;, if &lt;em&gt;M&lt;/em&gt; is a nonempty subset of &lt;em&gt;L&lt;/em&gt; forming a
lattice under &lt;em&gt;L&lt;/em&gt;&amp;rsquo;s meet and join operators.&lt;/p&gt;

&lt;p&gt;Take a lattice,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       Join(a, b, c)
           /\
          /  \
         /    \
   Join(a, b)  \c
       /\      /
      /  \    /
     /    \  /
   a/      \/b
    \      /
     \    /
      \  /
       \/
    Meet(a, b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(by the way, this is why it is called a lattice)&lt;/p&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Join(a, b)
       /\
      /  \
     /    \
  a /      \b
    \      /
     \    /
      \  /
       \/
    Meet(a, b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is a sublattice, since it holds all the conditions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is a nonempty subset.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It shares meet and join, while preserving closure (you can easily check this
yourself).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;region-classes&#34;&gt;Region classes&lt;/h2&gt;

&lt;p&gt;Region classes has many names, but none which is universally agreed upon, I
prefer the name region classes. As we say, a rose by any other name would still
smell as sweet.&lt;/p&gt;

&lt;p&gt;Let &lt;em&gt;L&lt;/em&gt; be our region lattice, define a &lt;em&gt;region class&lt;/em&gt; of &lt;em&gt;L&lt;/em&gt; as a sublattice
of &lt;em&gt;L&lt;/em&gt;, in the context of segregating regions.&lt;/p&gt;

&lt;p&gt;In particular, assign each value a region class. Say the value has the bounds
(outlives) &lt;code&gt;{a, b, c, d...}&lt;/code&gt;, then we derive our region class as the cyclic
sublattice, &lt;code&gt;&amp;lt;a, b, c, d...&amp;gt;&lt;/code&gt;. In particular, this means &lt;em&gt;the smallest
extension which forms a sublattice of L&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The compiler keeps a log of the region class of every variable. This is then
used for alias analysis:&lt;/p&gt;

&lt;h2 id=&#34;pointers-and-references&#34;&gt;Pointers and references&lt;/h2&gt;

&lt;p&gt;Taking an immutable reference extends our region class to contain the region of
this particular reference, denoted &lt;code&gt;M[N]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mutable references, on the other hand, works slightly different. The region
class and the region of the reference &lt;em&gt;must be disjoint&lt;/em&gt;, unless we get shared
mutability. With this requirement satisfied, we can proceed to extend the
region class with the new region.&lt;/p&gt;

&lt;h2 id=&#34;mutating-a-local-variable&#34;&gt;Mutating a local variable&lt;/h2&gt;

&lt;p&gt;You may ask, &amp;ldquo;Can you mutate a local variable while it is borrowed?&amp;rdquo;, the
answer is, &amp;ldquo;No, you cannot&amp;rdquo;. The reason is the same for the mutable aliasing:
it introduce shared mutable state.&lt;/p&gt;

&lt;p&gt;But, how do we handle such mutations?&lt;/p&gt;

&lt;p&gt;We introduced &lt;code&gt;empty(x)&lt;/code&gt;, the empty region at &lt;code&gt;x&lt;/code&gt;, in the earlier blog posts.
And we can use this to interpret local mutations as well: as taking a mutable
reference for region &lt;code&gt;empty(x)&lt;/code&gt; and simply mutate it through the reference.&lt;/p&gt;

&lt;h2 id=&#34;applying-this-method&#34;&gt;Applying this method&lt;/h2&gt;

&lt;p&gt;If we get back to our example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;{
    let mut a = 2; // ------+ &#39;a
    let b = &amp;amp;a;    // ----+ | &#39;b
    let mut c = 0; // --+ | | &#39;c
    c = 1;         //   | | |
    c = 2;         //   | | |
} // -------------------+-+-+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that the region class of &lt;code&gt;&#39;a&lt;/code&gt; is an extension of &lt;code&gt;&#39;b&lt;/code&gt;, but &lt;code&gt;&#39;c&lt;/code&gt; is
not entangled with &lt;code&gt;&#39;a&lt;/code&gt;&amp;rsquo;s region class. In particular, &lt;code&gt;&#39;c&lt;/code&gt; and &lt;code&gt;&#39;a&lt;/code&gt; belong to
different namespaces and thus, there is no shared mutability.&lt;/p&gt;

&lt;h2 id=&#34;region-classes-and-their-relations&#34;&gt;Region classes and their relations&lt;/h2&gt;

&lt;p&gt;A natural question that arise is: Why don&amp;rsquo;t we do region inference seperately
for each region class?&lt;/p&gt;

&lt;p&gt;The answer is that distinct region classes are far from unrelated. Each region
class simply defines a value and its aliases, but that doesn&amp;rsquo;t make it isolated
for the rest of &lt;em&gt;L&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you look at our example above, you may notice that &lt;code&gt;&#39;a&lt;/code&gt; outlives &lt;code&gt;&#39;c&lt;/code&gt;,
despite being associated with a different region class.&lt;/p&gt;

&lt;h2 id=&#34;questions-and-errata&#34;&gt;Questions and errata&lt;/h2&gt;

&lt;p&gt;Ping me at #rust in Mozilla IRC.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>