<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pointers on Ticki&#39;s blog</title>
    <link>http://ticki.github.io/tags/pointers/</link>
    <description>Recent content in Pointers on Ticki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jun 2016 11:24:24 +0200</lastBuildDate>
    
	<atom:link href="http://ticki.github.io/tags/pointers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lambda crabs (part 3): Region-based alias analysis</title>
      <link>http://ticki.github.io/blog/lambda-crabs-part-3-region-based-alias-analysis/</link>
      <pubDate>Wed, 08 Jun 2016 11:24:24 +0200</pubDate>
      
      <guid>http://ticki.github.io/blog/lambda-crabs-part-3-region-based-alias-analysis/</guid>
      <description>In the last post, we saw how to infer regions and their span. In this post, we will cover aliasing and how to ensure guarantees through region analysis.
Aliasing, mutable aliasing, and unsafety. Two pointers are said to be aliased, if they refer to the same object. Alias analysis is essential to program verification, optimizers, and compiler theory.
Alias analysis is the study of which pointers are aliased and, more importantly, which pointers aren&amp;rsquo;t aliased.</description>
    </item>
    
  </channel>
</rss>